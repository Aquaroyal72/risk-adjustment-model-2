week = c(1.6)
week = c(1:6)
male = c(50, 47, 33, 32, 45, 48)
line (week, male, type='1')
line (week, male, type="1")
lines(week, male, type="1")
plot(week,male,type="1")
lines(week, male, type="1")
plot(week, male, type="1")
help plot
help(plot)
lines(week, male, type="l")
plot(week, male, type="l")
help(runif)
coinToss<-function(p,n){
# cointoss similates a simple coin toss.
# everytime it is called it returns 0 or 1,
# with equal probability 1/2.
x=runif(n,0,1)
for (i in n) {
if (x(i)>=0.5) x(i)=1 else x(i)=0
}
return x;
}
reset;
coinToss<-function(p,n){
# cointoss similates a simple coin toss.
# everytime it is called it returns 0 or 1,
# with equal probability 1/2.
x=runif(n,0,1)
for (i in n) {
if (x(i)>=0.5) x(i)=1 else x(i)=0
}
coinToss = x;
}
help(replicate)
berRV<-function(p){
#everytime it is called it returns 0 or 1,
# with equal probability p.
x=runif(1,0,1)
if (x<=p) return(1) else return(0)
}
coinToss(10,0.6)
berRV(0.6)
replicate(10,berRV(0.6))
coinToss(10,0.6)
coinToss(10,0.6)
coinToss(10,0.6)
coinToss(10,0.6)
coinToss(10,0.6)
coinToss(10,0.6)
coinToss<-function(n,p){
return(berRV(p))
#return(replicate(n, berRV(p)))
}
coinToss(10,0.6)
berRV<-function(p){
#everytime it is called it returns 0 or 1,
# with equal probability p.
x<-runif(1,0,1)
return(1)
#if (x<=p) return(1) else return(0)
}
coinToss<-function(n,p){
a=c(1:n)
return(replicate(a, berRV(p)))
}
berRV<-function(p){
#everytime it is called it returns 0 or 1,
# with equal probability p.
x<-runif(1,0,1)
return(1)
#if (x<=p) return(1) else return(0)
}
coinToss<-function(n,p){
a=c(1:n)
return(replicate(a, berRV(p)))
}
coinToss(10,0.6)
berRV<-function(p){
#everytime it is called it returns 0 or 1,
# with equal probability p.
x<-runif(1,0,1)
return(1)
#if (x<=p) return(1) else return(0)
}
coinToss<-function(n,p){
a<-replicate(n, berRV(p))
return(a)
}
berRV(0.7)
berRV(0.7)
coinToss(10,0.6)
berRV<-function(p){
#everytime it is called it returns 0 or 1,
# with equal probability p.
x<-runif(1,0,1)
if (x<=p) return(1) else return(0)
}
coinToss<-function(n,p){
a<-replicate(n, berRV(p))
return(a)
}
berRV<-function(p){
#everytime it is called it returns 0 or 1,
# with equal probability p.
x<-runif(1,0,1)
if (x<=p) return(1) else return(0)
}
coinToss<-function(n,p){
a<-replicate(n, berRV(p))
return(a)
}
coinToss(10,0.8)
coinToss(10,0.2)
myCoinToss<-function(n,p){
a<-replicate(n, berRV(p))
return(a)
}
simpleDiscreteDistributions<-function(){
n = 10;
means = c(1:99)
vars = c(1:99)
P = seq(from = 0.01, to = 0.99, by = 0.01)
for (p in P) {
index = p * 100;
currentValues <- myCoinToss(10, p);
currentMean <- mean(currentValues);
currentVar <- var(currentValues);
means(index) = currentMean;
vars(index) = currentVar;
}
}
n = 10;
means = c(1:99)
vars = c(1:99)
P = seq(from = 0.01, to = 0.99, by = 0.01)
for (p in P) {
index = p * 100;
currentValues <- myCoinToss(10, p);
currentMean <- mean(currentValues);
currentVar <- var(currentValues);
means(index) = currentMean;
vars(index) = currentVar;
}
n = 10;
means = c(1:99)
vars = c(1:99)
P = seq(from = 0.01, to = 0.99, by = 0.01)
for (p in P) {
index = p * 100;
currentValues <- myCoinToss(10, p);
currentMean <- mean(currentValues);
currentVar <- var(currentValues);
means[index] <- currentMean;
vars[index] <- currentVar;
}
means
vars
means[7]
clear;
clear all
berRV<-function(p){
#everytime it is called it returns 0 or 1,
# with equal probability p.
x<-runif(1,0,1)
if (x<=p) return(1) else return(0)
}
myCoinToss<-function(n,p){
a<-replicate(n, berRV(p))
return(a)
}
myCoinToss(10,0.07)
n = 10;
means = c(1:99)
vars = c(1:99)
P = seq(from = 0.01, to = 0.99, by = 0.01)
for (p in P) {
index = p * 100;
currentValues <- myCoinToss(n, p);
currentMean <- mean(currentValues);
currentVar <- var(currentValues);
means[index] <- currentMean;
vars[index] <- currentVar;
}
means[0]
means[1]
means[]
n = 10;
means = c(1:99)
vars = c(1:99)
P = seq(from = 0.01, to = 0.99, by = 0.01)
for (p in P) {
index = p * 100;
currentValues <- myCoinToss(n, p);
currentMean <- mean(currentValues);
currentVar <- var(currentValues);
display(index);
display(currentMean);
display(currentVar);
means[index] <- currentMean;
vars[index] <- currentVar;
}
n = 10;
means = c(1:99)
vars = c(1:99)
P = seq(from = 0.01, to = 0.99, by = 0.01)
for (p in P) {
index = p * 100;
currentValues <- myCoinToss(n, p);
currentMean <- mean(currentValues);
currentVar <- var(currentValues);
disp(index);
disp(currentMean);
disp(currentVar);
means[index] <- currentMean;
vars[index] <- currentVar;
}
n = 10;
means = c(1:99)
vars = c(1:99)
P = seq(from = 0.01, to = 0.99, by = 0.01)
for (p in P) {
index = p * 100;
currentValues <- myCoinToss(n, p);
currentMean <- mean(currentValues);
currentVar <- var(currentValues);
print(index);
print(currentMean);
print(currentVar);
means[index] <- currentMean;
vars[index] <- currentVar;
}
means[7]
berRV<-function(p){
#everytime it is called it returns 0 or 1,
# with equal probability p.
x<-runif(1,0,1)
if (x<=p) return(1) else return(0)
}
myCoinToss<-function(n,p){
a<-replicate(n, berRV(p))
return(a)
}
n = 10;
means = c(1:99)
vars = c(1:99)
index = 1;
P = seq(from = 0.01, to = 0.99, by = 0.01)
for (p in P) {
currentValues <- myCoinToss(n, p);
means[index]  <- mean(currentValues);
vars[index] <- var(currentValues);
index = index + 1;
}
means
vars
n = 10;
means = c(1:99)
vars = c(1:99)
index = 1;
P = seq(from = 0.01, to = 0.99, by = 0.01)
for (p in P) {
currentValues <- myCoinToss(n, p);
means[index]  <- mean(currentValues);
vars[index] <- var(currentValues);
index = index + 1;
}
means
plot(1:10, seq(0,45,by=5), type = ’l’)
lines(1:10, seq(20,2,by=-2))
plot(1:10, seq(0,45,by=5), type = l);
lines(1:10, seq(20,2,by=-2));
plot(P, means, type ="l");
lines(P, P);
title(main="I.1a: means(p) and f(p)=p for n = 10")
plot(P, vars, type ="l");
lines(P, (1-P)*P);
title(main="I.1a: var(p) and f(p)=p(1-p) for n = 10")
n = 200;
means = c(1:99)
vars = c(1:99)
index = 1;
P = seq(from = 0.01, to = 0.99, by = 0.01)
for (p in P) {
currentValues <- myCoinToss(n, p);
means[index]  <- mean(currentValues);
vars[index] <- var(currentValues);
index = index + 1;
}
plot(P, means, type ="l");
lines(P, P);
title(main="I.1a: means(p) and f(p)=p for n = 200")
plot(P, vars, type ="l");
lines(P, (1-P)*P);
title(main="I.1a: var(p) and f(p)=p(1-p) for n = 200")
load("C:/Users/guanz/Dropbox/0_Princeton/Spring_2017/ORF_245/Programming/Ass_3/Prog3.RData")
errorbar
errorbar()
load("C:/Users/guanz/Dropbox/0_Princeton/Spring_2017/ORF_245/Programming/Ass_3/Prog3.RData")
choose(3,1)^2*choose(2,1)^2 / ((choose(6,2)*choose(4,2)))
choose(6,4)*choose(4,2)*2 / 113400 / 5!
choose(6,4)*choose(4,2)*2 / 113400 / 5/4/3/2
choose(6,4)*choose(4,2)*2 / 113400
choose(10,2)*choose(8,2)*choose(6,2)*choose(4,2)
choose(6,2)*choose(4,2)*choose(4,2)*choose(5,2)*choose(3,1)*choose(2,2)
16200/113400
choose(6,2)*choose(4,2)*choose(4,2)*choose(5,2)*choose(3,2)
pick(6,2)
permutation(6,2)
choose(6,2)*choose(4,2)*choose(4,2)*choose(5,2)*choose(3,2)*choose(2,1)*choose(2,1)
/113400
64800/113400
setwd('C:/Users/guanz/Desktop/JIW2/Week11')
exitdata <- read.csv('MarketExitAll_week11.csv')
exitdata$ExitedMarketIn2016 <- factor(exitdata$ExitedMarketIn2016)
exitfit <- glm(ExitedMarketIn2016 ~ TotalPC_2014_Quintile1 + TotalPC_2014_Quintile2
+ TotalPC_2014_Quintile3 + TotalPC_2014_Quintile4,
data=exitdata, family="binomial")
summary(exitfit)
coefficients(exitfit)
exitfit <- glm(ExitedMarketIn2016 ~ TotalPC_2014_Quintile1 + TotalPC_2014_Quintile5
,
data=exitdata, family="binomial")
summary(exitfit)
coefficients(exitfit)
exitfit <- glm(ExitedMarketIn2016 ~ TotalPC_2014_Quintile1 + TotalPC_2014_Quintile2
+ TotalPC_2014_Quintile4  + TotalPC_2014_Quintile5
,
data=exitdata, family="binomial")
summary(exitfit)
coefficients(exitfit)
exitfit <- glm(ExitedMarketIn2016 ~ TotalPC_2014_Quintile1 + TotalPC_2014_Quintile2
+ TotalPC_2014_Quintile4  + TotalPC_2014_Quintile5 + RTPMM2014
,
data=exitdata, family="binomial")
summary(exitfit)
coefficients(exitfit)
exitfit <- glm(ExitedMarketIn2016 ~ TotalPC_2014_Quintile1 + TotalPC_2014_Quintile2
+ TotalPC_2014_Quintile4  + TotalPC_2014_Quintile5 + IndRTPMM_2014,
data=exitdata, family="binomial")
summary(exitfit)
coefficients(exitfit)
# 1A
exitfit <- glm(LogMM16 ~ TotalPC_2014 + IndRTPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 1B
exitfit <- glm(LogMM16 ~ TotalPC_2014 + IndRTPMM_2014 + IndReinsPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 1C
exitfit <- glm(LogMM16 ~ IndRTPMM_2014 + IndReinsPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 2A
exitfit <- glm(LogChangeMM1614 ~ TotalPC_2014 + IndRTPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 2B
exitfit <- glm(LogChangeMM1614 ~ TotalPC_2014 + IndRTPMM_2014 + IndReinsPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 2C
exitfit <- glm(LogChangeMM1614 ~ IndRTPMM_2014 + IndReinsPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 3A
exitfit <- glm(IndRTPMM_2016 ~ TotalPC_2014 + IndRTPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 3B
exitfit <- glm(IndRTPMM_2016 ~ TotalPC_2014 + IndRTPMM_2014 + IndReinsPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 3C
exitfit <- glm(IndRTPMM_2016 ~ IndRTPMM_2014 + IndReinsPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 3A
exitfit <- glm(IndRTPMM ~ TotalPC_2014 + IndRTPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 3B
exitfit <- glm(IndRTPMM ~ TotalPC_2014 + IndRTPMM_2014 + IndReinsPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 3C
exitfit <- glm(IndRTPMM ~ IndRTPMM_2014 + IndReinsPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 4A
exitfit <- glm(ChangeTransfers1614 ~ TotalPC_2014 + IndRTPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 4B
exitfit <- glm(ChangeTransfers1614 ~ TotalPC_2014 + IndRTPMM_2014 + IndReinsPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 4C
exitfit <- glm(ChangeTransfers1614 ~ IndRTPMM_2014 + IndReinsPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
setwd('C:/Users/guanz/Desktop/JIW2/Week11')
exitdata <- read.csv('MarketExitAll_week11.csv')
exitdata$ExitedMarketIn2016 <- factor(exitdata$ExitedMarketIn2016)
# old tests
exitfit <- glm(ExitedMarketIn2016 ~ TotalPC_2014_Quintile1 + TotalPC_2014_Quintile5,
data=exitdata, family="binomial")
summary(exitfit)
coefficients(exitfit)
exitfit <- glm(ExitedMarketIn2016 ~ TotalPC_2014_Quintile1 + TotalPC_2014_Quintile2
+ TotalPC_2014_Quintile4  + TotalPC_2014_Quintile5 + IndRTPMM_2014,
data=exitdata, family="binomial")
summary(exitfit)
coefficients(exitfit)
# 4 outcomes:
# 1. log MM 16
# 2. log MM 16 - log MM 14
# 3. transfers 16
# 4. transfers 16 - transfers 14
# 3 dependent variable sets:
# A. total PC 14 + transfers 14
# B. total PC 14 + transfers 14 + reins 14
# C. transfers 14 + reins 14
# new tests
# 1A
exitfit <- glm(LogMM16 ~ TotalPC_2014 + IndRTPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 1B
exitfit <- glm(LogMM16 ~ TotalPC_2014 + IndRTPMM_2014 + IndReinsPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 1C
exitfit <- glm(LogMM16 ~ IndRTPMM_2014 + IndReinsPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 2A
exitfit <- glm(LogChangeMM1614 ~ TotalPC_2014 + IndRTPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 2B
exitfit <- glm(LogChangeMM1614 ~ TotalPC_2014 + IndRTPMM_2014 + IndReinsPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 2C
exitfit <- glm(LogChangeMM1614 ~ IndRTPMM_2014 + IndReinsPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 3A
exitfit <- glm(Transfers16 ~ TotalPC_2014 + IndRTPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 3B
exitfit <- glm(Transfers16 ~ TotalPC_2014 + IndRTPMM_2014 + IndReinsPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 3C
exitfit <- glm(Transfers16 ~ IndRTPMM_2014 + IndReinsPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 4A
exitfit <- glm(ChangeTransfers1614 ~ TotalPC_2014 + IndRTPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 4B
exitfit <- glm(ChangeTransfers1614 ~ TotalPC_2014 + IndRTPMM_2014 + IndReinsPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
# 4C
exitfit <- glm(ChangeTransfers1614 ~ IndRTPMM_2014 + IndReinsPMM_2014,
data=exitdata)
summary(exitfit)
coefficients(exitfit)
